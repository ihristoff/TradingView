//@version=5
indicator("Treasury Spreads (Overlay)", overlay=false)

// Display options
display_mode = input.string("Normalized", "Display Mode", options=["Normalized", "Percent Change", "Absolute", "Z-Score"])

// Input for Z-Score period
z_score_period = input.int(20, title="Z-Score Period", minval=1, maxval=100)

// Input for percent change reference point
percent_change_mode = input.string("First Visible", "Percent Change Mode", options=["First Visible", "Lookback Period"])
lookback_period = input.int(20, title="Percent Change Lookback Period", tooltip="Number of bars back to use as reference", minval=1)

// Input options for different spreads
show_fit = input.bool(false, "Show FIT (2*5y-10y)")
show_fyt = input.bool(true, "Show FYT (3*5y-2*10y)")
show_nob = input.bool(true, "Show NOB (2*10y-30y)")
show_nib = input.bool(false, "Show NIB (3*10y-30y)")
show_curve = input.bool(false, "Show 4*ZT-ZB)")
show_es = input.bool(false, "Show ES")
show_zn = input.bool(false, "Show ZN")
show_zb = input.bool(false, "Show ZB")

// Input for securities
two_year = input(title="2-Year Symbol", defval="ZT1!")
five_year = input(title="5-Year Symbol", defval="ZF1!")
ten_year = input(title="10-Year Symbol", defval="ZN1!")
thirty_year = input(title="30-Year Symbol", defval="ZB1!")
es = input(title="ES", defval="ES1!")
zn = input(title="ZN", defval="ZN1!")

// Security prices
two_year_price = request.security(two_year, timeframe.period, close)
five_year_price = request.security(five_year, timeframe.period, close)
ten_year_price = request.security(ten_year, timeframe.period, close)
thirty_year_price = request.security(thirty_year, timeframe.period, close)
es_price = request.security(es, timeframe.period, close)
zn_price = request.security(zn, timeframe.period, close)
zb_price = request.security(thirty_year, timeframe.period, close)

// Calculate spreads
fit_spread = 2 * five_year_price - ten_year_price
fyt_spread = 3 * five_year_price - 2 * ten_year_price
nob_spread = 2 * ten_year_price - thirty_year_price
nib_spread = 3 * ten_year_price - thirty_year_price
curve_spread = 4 * two_year_price - thirty_year_price

// Normalize spreads to make them comparable
normalize(series) =>
    sma_series = ta.sma(series, 20)
    (series - ta.sma(sma_series, 100)) / ta.stdev(series, 100)

// Calculate percent change based on reference point
percent_change_from_ref(series, mode, lookback) =>
    var reference_value = 0.0
    
    if mode == "First Visible"
        // Get the first visible bar
        first_visible_bar = chart.left_visible_bar_time
        
        // Reset reference when chart view changes or on the first bar
        if time == first_visible_bar or na(reference_value) or reference_value == 0
            reference_value := series
    else // "Lookback Period"
        // Get the value from n bars back, recalculated on each bar
        reference_value := series[lookback]
    
    // Calculate percent change
    (series - reference_value) / reference_value * 100

// Z-Score calculation with user-defined period
z_score(series, length) =>
    (series - ta.sma(series, length)) / ta.stdev(series, length)

// Process spreads based on selected display mode
process_spread(series) =>
    if display_mode == "Normalized"
        normalize(series)
    else if display_mode == "Percent Change"
        percent_change_from_ref(series, percent_change_mode, lookback_period)
    else if display_mode == "Z-Score"
        z_score(series, z_score_period)  // Use user-defined Z-Score period
    else  // Absolute
        series

// Apply processing based on display mode
fit_processed = process_spread(fit_spread)
fyt_processed = process_spread(fyt_spread)
nob_processed = process_spread(nob_spread)
nib_processed = process_spread(nib_spread)
curve_processed = process_spread(curve_spread)
es_processed = process_spread(es_price)
zn_processed = process_spread(zn_price)
zb_processed = process_spread(zb_price)

// Plot spreads with conditional coloring
plot(show_fit ? fit_processed : na, color=color.blue, title="FIT", linewidth=2)
plot(show_fyt ? fyt_processed : na, color=color.red, title="FYT", linewidth=2)
plot(show_nob ? nob_processed : na, color=color.green, title="NOB", linewidth=2)
plot(show_nib ? nib_processed : na, color=color.purple, title="NIB", linewidth=2)
plot(show_curve ? curve_processed : na, color=color.maroon, title="4ZT-ZB", linewidth=2)
plot(show_es ? es_processed : na, color=color.orange, title="ES", linewidth=2)
plot(show_zn ? zn_processed : na, color=color.white, title="ZN", linewidth=2)
plot(show_zb ? zb_processed : na, color=color.white, title="ZB", linewidth=2)

// Create labels only at the last bar of the chart
if barstate.islast
    if show_fit
        label.new(bar_index + 20, fit_processed, text="FIT", color=color.blue, style=label.style_label_right, textcolor=color.white, size=size.small)
    if show_fyt
        label.new(bar_index + 20, fyt_processed, text="FYT", color=color.red, style=label.style_label_right, textcolor=color.white, size=size.small)
    if show_nob
        label.new(bar_index + 20, nob_processed, text="NOB", color=color.green, style=label.style_label_right, textcolor=color.white, size=size.small)
    if show_nib
        label.new(bar_index + 20, nib_processed, text="NIB", color=color.purple, style=label.style_label_right, textcolor=color.white, size=size.small)
    if show_es
        label.new(bar_index + 30, es_processed, text="ES", color=color.orange, style=label.style_label_right, textcolor=color.white, size=size.small)
    if show_zn
        label.new(bar_index + 30, zn_processed, text="ZN", color=color.white, style=label.style_label_right, textcolor=color.blue, size=size.small)
    if show_zb
        label.new(bar_index + 30, zb_processed, text="ZB", color=color.white, style=label.style_label_right, textcolor=color.blue, size=size.small)
    if show_curve
        label.new(bar_index + 30, curve_processed, text="4ZT-ZB", color=color.maroon, style=label.style_label_right, textcolor=color.white, size=size.small)

// Add horizontal lines for reference - must be in global scope
// Conditional lines for normalized mode only
hline(display_mode == "Normalized" ? 2 : na, color=color.gray, linestyle=hline.style_dotted)
hline(display_mode == "Normalized" ? -2 : na, color=color.gray, linestyle=hline.style_dotted)
hline(display_mode == "Normalized" ? 0 : na, color=color.gray, linestyle=hline.style_dotted)